cmdhistory=["(ns rdl.jpl)" "(defrel 'mother [\:SELF \:CHILD])" "(query\\n  (assert-rel 'mother {\:SELF 'sue \:CHILD 'kaylen}))" "(query\\n  (rel 'mother {\:SELF \:X}))" "(query\\n  (rel 'mother {\:SELF \:X \:CHILD \:Y}))" "(query\\n  (rel 'mother {\:SELF \:X \:CHILD \:X}))" "(compile 'rdl.interop.Relation)" "(compile 'rdl.interop.RDLInterface)" "(compile *1)" "(compile 'rdl.interop.RDLInterface)" "(ancestors IPersistentMap)" "(ancestors clojure.lang.IPersistentMap)" "(compile 'rdl.interop.Rule)" "(compile 'rdl.interop.RDLInterface)" ";; Switching to rdl.interop.RDLInterface namespace" "(compile 'rdl.interop.RDLInterface)" "(copmile 'rdl.interop.RDLRule)" "(compile 'rdl.interop.RDLRule)" "(compile 'rdl.interop.RDLRelation)" ";; Switching to rdl.interop.RDLRule namespace" "(compile 'rdl.interop.RDLRule)" "(compile 'rdl.interop.RDLRelation)" "(compile 'rdl.interop.RDLInterface)" "(compile 'rdl.interop.RDLRule)" "(compile 'rdl.interop.RDLInterface)" "(compile 'rdl.interop.RDLRelation)" "(compile 'rdl.interop.RDLInterface)" "(compile 'rdl.interop.RDLRule)" ";; Switching to rdl.interop.RDLRule namespace" "(compile 'rdl.interop.RDLRule)" "(compile 'rdl.interop.RDLRelation)" ";; Switching to rdl.interop.RDLRelation namespace" "(compile '.rdl.interop.RDLInterface)" "(compile '.rdl.interop.RDLRelation)" "(compile 'rdl.interop.RDLRelation)" "(compile '.rdl.interop.RDLRelation)" "(compile 'rdl.interop.RDLRelation)" "(compile 'rdl.interop.RDLRule)" "(compile 'rdl.interop.RDLInterface)" "(compile 'rdl.interop.RDLRule)" "(compile 'rdl.interop.RDLRelation)" "(compile 'rdl.interop.RDLRule)" "(compile 'rdl.interop.RDLRelation)" "(compile 'rdl.interop.RDLInterface)" "(compile 'rdl.interop.RDLRelation)" "(ns rdl.jpl)" "(defrel 'mother [\:SELF \:CHILD])" "(rel 'mother {\:SELF \:X \:CHILD \:Y})" "(rdl.jpl/clj-term *1)" "(defrel 'emotion [\:SELF \:ANGER \:HAPPINESS \:SADNESS])" "(rel 'mother {\:SELF \:X \:CHILD \:Y})" "(rel 'emotion {})" "(rel 'emotion {\:ANGER \:A \:HAPPINESS \:H \:SADNESS \:S})" "(rel 'emotion {\:ANGER \:A \:SADNESS \:S \:HAPPINESS \:H })" "(rel 'emotion {\:ANGER \:A \:SADNESS \:S \:HAPPINESS \:H \:SELF 'johnny})" "(clj-term *1)" "(clj-term '(> 1.0 0.0))" "(query\\n(clj-term '(> 1.0 0.0)))" "(query\\n'(> 1.0 0.0))" "(query\\n  '(\= X 1.0)\\n'(> X 0.0))" "(query\\n  '(\= X 1.0)\\n'(> X 2.0))" "(query\\n  '(\= \:X 1.0)\\n'(> \:X 0.0))" "(query\\n  '(\= \:X 1.0)\\n'(> \:X 2.0))" "*relations*" "(defrel 'anger [\:SELF \:VALUE])" "(ns rdl.jpl)" "(defrel 'anger [\:SELF \:VALUE])" "(defrel 'smack [\:INST \:TARG])" "(query\\n  (rel 'anger {\:SELF 'johnny \:VAL 0.0})\\n  (rel 'smack {\:INST 'ace \:TARG 'johnny}))" "(query\\n  (assert-rel 'anger {\:SELF 'johnny \:VAL 0.0})\\n  (assert-rel 'smack {\:INST 'ace \:TARG 'johnny}))" "(defrule\\n  'smackback\\n  (rel 'anger {\:SELF \:T \:VAL \:V})\\n  '(> \:V 0.8)\\n  (rel 'smack {\:INST \:I \:TARG \:T})\\n  \:\=\=>\\n  (assert-rel 'smack {\:INST \:T \:TARG \:I}))" "(use 'rdl.rule)" "(defrule\\n  'smackback\\n  (rel 'anger {\:SELF \:T \:VAL \:V})\\n  '(> \:V 0.8)\\n  (rel 'smack {\:INST \:I \:TARG \:T})\\n  \:\=\=>\\n  (assert-rel 'smack {\:INST \:T \:TARG \:I}))" "(update-head)" "(query\\n  '(> 1.0 0.0))" "(compose\\n  (rel 'anger {\:SELF \:T \:VAL \:V})\\n  '(> \:V 0.8)\\n  (rel 'smack {\:INST \:I \:TARG \:T}))" "(clj-term *1)" "(query\\n  (rel 'anger {\:SELF \:T \:VAL \:V})\\n  '(> \:V 0.8)\\n  (rel 'smack {\:INST \:I \:TARG \:T}))" "(query\\n  (rel 'anger {\:SELF \:T \:VAL \:V})\\n  (rel 'smack {\:INST \:I \:TARG \:T}))" "(query\\n  (rel 'anger {\:SELF \:T \:VAL \:V})\\n  '(> \:V 0.8))" "(query\\n  (rel 'anger {\:SELF \:T \:VAL \:V})\\n  '(< \:V 0.8))" "(query\\n  (rel 'anger {\:SELF \:T \:VAL \:V})\\n  '(\= \:V 0.8))" "(query\\n  '(\= \:V 0.5)\\n  '(> \:V 0.8))" "(query\\n  '(\= \:V 09)\\n  '(> \:V 0.8))" "(query\\n  '(\= \:V 0.9)\\n  '(> \:V 0.8))" "(compose\\n  (rel 'anger {\:SELF \:T \:VAL \:V})\\n  '(> \:V 0.8)\\n  (rel 'smack {\:INST \:I \:TARG \:T}))" "(clj-term\\n  (compose\\n  (rel 'anger {\:SELF \:T \:VAL \:V})\\n  '(> \:V 0.8)\\n  (rel 'smack {\:INST \:I \:TARG \:T})))" "(query\\n  (rel 'anger {\:SELF \:T \:VALUE \:V})\\n  '(> \:V 0.8)\\n  (rel 'smack {\:INST \:I \:TARG \:T}))" "*relations*" "(query\\n  (rel 'anger {\:SELF \:T \:VALUE \:V})\\n  (rel 'smack {\:INST \:I \:TARG \:T}))" "(query\\n  (rel 'anger {\:SELF \:T \:VALUE \:V}))" "(query\\n  '(\= \:X (+ 2 3)))" "(clj-term\\n  '(\= \:X (+ 2 3)))" "(clj-term\\n  '(is \:X (+ 2 3)))" "(query\\n  '(is \:X (+ 2 3)))" "(query\\n  '(> 4 (+ 2 3)))" "(query\\n  '(> 6 (+ 2 3)))" "(query\\n  '(\= \:X 2)\\n  '(\= \:Y 3)\\n  '(> 5 (+ \:X \:Y)))" "(query\\n  '(\= \:X 2)\\n  '(\= \:Y 3)\\n  '(> 6 (+ \:X \:Y)))" "(compile 'rdl.interop.RDLRule)" "(compile 'rdl.interop.RDLRelation)" "(compile 'rdl.interop.RDLInterface)" "(query\\n  '(\= \:X 1)\\n  '(\= \:Y 2)\\n  '(\!\= \:X \:Y))" "(compile 'rdl.interop.RDLRule)" "(compile 'rdl.interop.RDLInterface)" "(compile 'rdl.interop.RDLRule)" "(compile 'rdl.interop.RDLRelation)" "(query\\n  '(\!\= 2 3))" "(query\\n  '(\!\= 2 2))" "(let [[[kw1 kw2] f & args] [[] + 1]] f)" "(any? even? (range 5))" "(some even? (range 5))" "(some even? (range 0 2))" "(doc range)" "(some even? (range 1 9 2))" "(let [[[kw1 kw2] f & args] [[] + 1]] kw1)" "(let [[[kw1 kw2] f & args] [[] + 1]] kw2)" "(let [[[kw1 kw2] f & args] [[] + 1]] f)" "(let [[[kw1 kw2] f & args] [[\:a] + 1]] kw1)" "(let [[[kw1 kw2] f & args] [[\:a] + 1]] kw2)" "(every? even? (range 5))" "(every? even? (range 0 8 2))" "(doc range)" "(meta (fn [] nil))" "(meta (fn [a] nil))" "(query\\n  (assert-rel 'smack {\:INST 'ace \:TARG 'johnny})\\n  (assert-rel 'anger {\:SELF 'johnny \:VAL 0.0}))" "(query\\n  (assert-rel 'anger {\:SELF 'johnny \:VAL 0.0}))" "(query\\n  (rel 'anger {\:SELF \:X \:VAL \:V}))" "(+ 1 2)" "(query\\n  (assert-rel 'smack {\:INST 'ace \:TARG 'johnny}))" "(query\\n  (assert-rel 'anger {\:SELF 'johnny \:VAL 0.0}))" "(update-head)" "(update-tail)" "(map\\n  (fn [a] a) {\:a 1 \:b 2})" "(map\\n  (fn [[k v]] k) {\:a 1 \:b 2})" "(update-tail)" "(+ 1 2)" "(query\\n  (rel 'smack {\:INST 'ace \:TARG 'johnny}))" "(query\\n  (assert-rel 'smack {\:INST 'ace \:TARG 'johnny}))" "(query\\n  (assert-rel 'anger {\:SELF 'ace \:VAL 0.0}))" "(update-head)" "(update-tail)" "(query\\n  (rel 'smack {\:INST 'ace \:TARG 'johnny}))" "(query\\n  (rel 'anger {\:SELF \:X \:VAL \:V}))" "(query\\n  (assert-rel 'anger {\:SELF 'johnny \:VAL 0.0}))" "(update-head)" "(update-tail)" "(fn? +)" "(fn? (read \\"+\\"))" "(fn? (read-string \\"+\\"))" "(fn? (eval (read-string \\"+\\")))" "(compile rdl.interop.RDLRule)" "(compile 'rdl.interop.RDLRule)" "(compile 'rdl.interop.RDLInterface)" "(compile '.rdl.interop.RDLRelation)"]
eclipse.preferences.version=1
